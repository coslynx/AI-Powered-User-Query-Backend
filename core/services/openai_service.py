import openai  # 1.52.0: Interact with OpenAI's API for query processing
import requests  # 2.32.3: Make HTTP requests to external APIs, including OpenAI
from typing import Dict, Optional

from config.settings import settings

class OpenAIService:
    """
    Service class for interacting with OpenAI's API.

    Handles authentication, query processing, and response retrieval.
    """

    def __init__(self):
        """
        Initializes the OpenAI service with API credentials from settings.
        """
        openai.api_key = settings.OPENAI_API_KEY

    def process_query(self, query: str, model: str = "text-davinci-003", parameters: Optional[Dict] = None) -> str:
        """
        Processes a user query using OpenAI's API.

        Args:
            query: The user query to process.
            model: The OpenAI language model to use. Defaults to "text-davinci-003".
            parameters: Additional parameters for the OpenAI model, such as temperature, max_length, etc.

        Returns:
            The response generated by the OpenAI model.

        Raises:
            requests.exceptions.RequestException: If there is an error during the API call.
            openai.error.APIError: If there is an OpenAI API error.
        """
        try:
            response = openai.Completion.create(
                engine=model,
                prompt=query,
                temperature=parameters.get("temperature", 0.7),
                max_tokens=parameters.get("max_tokens", 256),
                top_p=parameters.get("top_p"),
                frequency_penalty=parameters.get("frequency_penalty"),
                presence_penalty=parameters.get("presence_penalty"),
            )
            return response.choices[0].text
        except requests.exceptions.RequestException as e:
            # Handle network errors
            raise e
        except openai.error.APIError as e:
            # Handle OpenAI API errors
            raise e